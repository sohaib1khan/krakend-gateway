<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>KrakenD Configuration Manager</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { 
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
        }
        .header { 
            background: rgba(255,255,255,0.1); 
            backdrop-filter: blur(10px);
            color: white; 
            padding: 1rem 0; 
            text-align: center; 
            border-bottom: 1px solid rgba(255,255,255,0.2);
        }
        .container { max-width: 1600px; margin: 0 auto; padding: 20px; }
        .dashboard { display: grid; grid-template-columns: 250px 1fr; gap: 20px; }
        
        .sidebar { 
            background: rgba(255,255,255,0.1); 
            backdrop-filter: blur(10px);
            border-radius: 12px; 
            padding: 20px; 
            border: 1px solid rgba(255,255,255,0.2);
            height: fit-content;
        }
        .sidebar h3 { color: white; margin-bottom: 20px; }
        .nav-item { 
            display: block; 
            color: rgba(255,255,255,0.8); 
            text-decoration: none; 
            padding: 12px 16px; 
            margin: 5px 0;
            border-radius: 8px; 
            transition: all 0.3s ease;
            cursor: pointer;
            border: none;
            background: none;
            width: 100%;
            text-align: left;
        }
        .nav-item:hover, .nav-item.active { 
            background: rgba(255,255,255,0.2); 
            color: white;
            transform: translateX(5px);
        }
        
        .main-content { 
            background: rgba(255,255,255,0.95); 
            border-radius: 12px; 
            padding: 30px; 
            max-height: 90vh;
            overflow-y: auto;
        }
        
        .content-section { display: none; }
        .content-section.active { display: block; }
        
        .stats-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin-bottom: 30px; }
        .stat-card { 
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white; 
            padding: 20px; 
            border-radius: 12px; 
            text-align: center;
        }
        .stat-value { font-size: 2em; font-weight: bold; }
        .stat-label { opacity: 0.9; margin-top: 5px; }
        
        .card { 
            background: white; 
            border-radius: 12px; 
            padding: 25px; 
            margin: 20px 0; 
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        }
        .card h3 { color: #2c3e50; margin-bottom: 20px; }
        
        button { 
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white; 
            padding: 12px 24px; 
            border: none; 
            border-radius: 8px; 
            cursor: pointer; 
            margin: 5px; 
            font-weight: 500;
            transition: all 0.3s ease;
        }
        button:hover { transform: translateY(-2px); }
        button.success { background: linear-gradient(135deg, #00b894, #00a085); }
        button.danger { background: linear-gradient(135deg, #ff6b6b, #ee5a24); }
        button.warning { background: linear-gradient(135deg, #fdcb6e, #e17055); }
        
        input, textarea, select { 
            width: 100%; 
            padding: 12px; 
            margin: 8px 0; 
            border: 2px solid #e1e8ed; 
            border-radius: 8px; 
        }
        
        .form-group { margin: 15px 0; }
        label { display: block; margin-bottom: 8px; font-weight: 600; color: #2c3e50; }
        
        .endpoint-item { 
            background: #f8f9fa; 
            padding: 20px; 
            margin: 10px 0; 
            border-radius: 8px; 
            border-left: 4px solid #667eea;
        }
        
        .endpoint-header { 
            display: flex; 
            justify-content: space-between; 
            align-items: center; 
            margin-bottom: 10px; 
        }
        
        .method-badge { 
            padding: 4px 8px; 
            border-radius: 4px; 
            font-size: 12px; 
            font-weight: bold; 
        }
        .method-get { background: #00b894; color: white; }
        .method-post { background: #fdcb6e; color: #2d3436; }
        .method-put { background: #a29bfe; color: white; }
        .method-delete { background: #ff6b6b; color: white; }
        
        .result { 
            background: #f8f9fa; 
            padding: 20px; 
            margin: 15px 0; 
            border-radius: 8px; 
            border-left: 4px solid #667eea;
            font-family: monospace; 
            font-size: 13px; 
            max-height: 300px; 
            overflow-y: auto;
            white-space: pre-wrap;
        }
        
        .tabs { display: flex; margin-bottom: 20px; }
        .tab { 
            padding: 10px 20px; 
            background: #ecf0f1; 
            border: none; 
            cursor: pointer; 
            margin-right: 2px;
            border-radius: 4px 4px 0 0;
        }
        .tab.active { background: #667eea; color: white; }
        
        .help-text { 
            background: #e8f4fd; 
            border: 1px solid #bee5eb; 
            border-radius: 4px; 
            padding: 12px; 
            margin: 10px 0; 
            font-size: 14px; 
            color: #0c5460; 
        }
        
        .modal { 
            display: none; 
            position: fixed; 
            z-index: 1000; 
            left: 0; 
            top: 0; 
            width: 100%; 
            height: 100%; 
            background: rgba(0,0,0,0.5); 
        }
        .modal-content { 
            background: white; 
            margin: 5% auto; 
            padding: 20px; 
            border-radius: 12px; 
            width: 80%; 
            max-width: 600px; 
        }
        .modal-header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px; }
        .close { font-size: 28px; cursor: pointer; }
    </style>
</head>
<body>
    <div class="header">
        <h1>üêô KrakenD Configuration Manager</h1>
        <p>Visual API Gateway Configuration Tool</p>
    </div>

    <div class="container">
        <div class="dashboard">
            <div class="sidebar">
                <h3>Navigation</h3>
                <button class="nav-item active" onclick="showSection('overview')">üìä Overview</button>
                <button class="nav-item" onclick="showSection('endpoints')">üîó Manage APIs</button>
                <button class="nav-item" onclick="showSection('add-endpoint')">‚ûï Add API</button>
                <button class="nav-item" onclick="showSection('settings')">‚öôÔ∏è Settings</button>
                <button class="nav-item" onclick="showSection('test')">üß™ Test APIs</button>
                <button class="nav-item" onclick="showSection('help')">‚ùì Help</button>
            </div>

            <div class="main-content">
                <div id="overview" class="content-section active">
                    <h2>Gateway Overview</h2>
                    
                    <div class="stats-grid">
                        <div class="stat-card">
                            <div class="stat-value" id="endpoint-count">-</div>
                            <div class="stat-label">Total Endpoints</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-value" id="gateway-port">-</div>
                            <div class="stat-label">Gateway Port</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-value" id="cors-status">-</div>
                            <div class="stat-label">CORS Enabled</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-value" id="config-status">-</div>
                            <div class="stat-label">Config Status</div>
                        </div>
                    </div>
                    
                    <div class="card">
                        <h3>Quick Actions</h3>
                        <button onclick="loadConfig()" class="success">üîÑ Reload Config</button>
                        <button onclick="validateConfig()" class="warning">‚úÖ Validate Config</button>
                        <button onclick="restartGateway()" class="danger">üîß Restart Gateway</button>
                        <button onclick="showSection('add-endpoint')" class="success">‚ûï Add New API</button>
                    </div>
                    
                    <div class="card">
                        <h3>Configuration Validation</h3>
                        <div id="validation-result" class="result">Click "Validate Config" to check your configuration...</div>
                    </div>
                </div>

                <div id="endpoints" class="content-section">
                    <h2>API Endpoints Management</h2>
                    <div class="card">
                        <h3>Current Endpoints</h3>
                        <button onclick="loadEndpoints()" class="success">üîÑ Refresh</button>
                        <div id="endpoints-list">Loading endpoints...</div>
                    </div>
                </div>

                <div id="add-endpoint" class="content-section">
                    <h2>Add New API Endpoint</h2>
                    
                    <div class="tabs">
                        <button class="tab active" onclick="showTab('simple')">Simple Proxy</button>
                        <button class="tab" onclick="showTab('advanced')">Advanced</button>
                        <button class="tab" onclick="showTab('templates')">Templates</button>
                    </div>
                    
                    <div id="simple-tab" class="tab-content active">
                        <div class="card">
                            <h3>Simple API Proxy</h3>
                            <div class="help-text">
                                üí° <strong>Simple Proxy:</strong> Creates a direct proxy from your gateway to another API service. 
                                Example: Gateway receives request at <code>/api/users</code> ‚Üí forwards to <code>http://backend:5000/api/users</code>
                            </div>
                            
                            <form id="simple-endpoint-form">
                                <div class="form-group">
                                    <label for="endpoint-path">Gateway Endpoint Path</label>
                                    <input type="text" id="endpoint-path" placeholder="/api/users" required>
                                    <small>The path users will call on your gateway (e.g., /api/users)</small>
                                </div>
                                
                                <div class="form-group">
                                    <label for="method">HTTP Method</label>
                                    <select id="method" required>
                                        <option value="GET">GET - Read data</option>
                                        <option value="POST">POST - Create data</option>
                                        <option value="PUT">PUT - Update data</option>
                                        <option value="DELETE">DELETE - Remove data</option>
                                    </select>
                                </div>
                                
                                <div class="form-group">
                                    <label for="backend-host">Backend Service URL</label>
                                    <input type="text" id="backend-host" placeholder="http://192.168.1.30:5000" required>
                                    <small>The actual service that will handle the request</small>
                                </div>
                                
                                <div class="form-group">
                                    <label for="backend-path">Backend Path</label>
                                    <input type="text" id="backend-path" placeholder="/api/users">
                                    <small>Path on the backend service (leave empty to use same as gateway path)</small>
                                </div>
                                
                                <button type="submit" class="success">‚ú® Create API Endpoint</button>
                            </form>
                        </div>
                    </div>
                    
                    <div id="add-result" class="result" style="display: none;"></div>
                </div>

                <div id="settings" class="content-section">
                    <h2>Gateway Settings</h2>
                    <div class="card">
                        <h3>Configuration</h3>
                        <div class="form-group">
                            <label>Gateway Port</label>
                            <input type="number" id="gateway-port-setting" placeholder="8684">
                        </div>
                        <div class="form-group">
                            <label>Request Timeout</label>
                            <input type="text" id="timeout-setting" placeholder="3000ms">
                        </div>
                        <div class="form-group">
                            <label>Cache TTL</label>
                            <input type="text" id="cache-ttl-setting" placeholder="300s">
                        </div>
                        <button onclick="updateSettings()" class="success">üíæ Save Settings</button>
                    </div>
                    
                    <div class="card">
                        <h3>Configuration Backups</h3>
                        <button onclick="loadBackups()" class="success">üìã List Backups</button>
                        <div id="backups-list" class="result">Click "List Backups" to see available backups...</div>
                    </div>
                </div>

                <div id="test" class="content-section">
                    <h2>API Testing</h2>
                    <div class="card">
                        <h3>Test Your APIs</h3>
                        <div class="form-group">
                            <label>Endpoint to Test</label>
                            <input type="text" id="test-endpoint" placeholder="/api/team">
                        </div>
                        <div class="form-group">
                            <label>HTTP Method</label>
                            <select id="test-method">
                                <option value="GET">GET</option>
                                <option value="POST">POST</option>
                                <option value="PUT">PUT</option>
                                <option value="DELETE">DELETE</option>
                            </select>
                        </div>
                        <button onclick="testEndpoint()" class="success">üß™ Test Endpoint</button>
                        <div id="test-results" class="result">Test results will appear here...</div>
                    </div>
                </div>

                <div id="help" class="content-section">
                    <h2>Help & Documentation</h2>
                    <div class="card">
                        <h3>üöÄ Getting Started</h3>
                        <p><strong>What is an API Gateway?</strong></p>
                        <p>An API Gateway is like a "front door" for your APIs. Instead of clients calling your services directly, they call the gateway, which then forwards requests to the right service.</p>
                        
                        <h4>Common Use Cases:</h4>
                        <ul>
                            <li><strong>Single Entry Point:</strong> One URL for all your APIs</li>
                            <li><strong>Load Balancing:</strong> Distribute requests across multiple servers</li>
                            <li><strong>Rate Limiting:</strong> Prevent abuse by limiting requests</li>
                            <li><strong>Authentication:</strong> Secure your APIs</li>
                            <li><strong>API Composition:</strong> Combine multiple APIs into one response</li>
                        </ul>
                    </div>
                    
                    <div class="card">
                        <h3>üìù Configuration Guide</h3>
                        <h4>Endpoint Structure:</h4>
                        <ul>
                            <li><strong>Gateway Path:</strong> What users call (e.g., /api/users)</li>
                            <li><strong>Backend Host:</strong> Where the real service is (e.g., http://service:5000)</li>
                            <li><strong>Backend Path:</strong> Path on the backend service</li>
                            <li><strong>Method:</strong> HTTP method (GET, POST, PUT, DELETE)</li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        const GATEWAY_URL = 'http://xxx.xxx.x.xx:8684';
        const MANAGER_URL = 'http://xxx.xxx.x.xx:5001';

        function showSection(sectionId) {
            document.querySelectorAll('.content-section').forEach(el => el.classList.remove('active'));
            document.querySelectorAll('.nav-item').forEach(el => el.classList.remove('active'));
            
            document.getElementById(sectionId).classList.add('active');
            event.target.classList.add('active');
        }

        function showTab(tabId) {
            document.querySelectorAll('.tab').forEach(el => el.classList.remove('active'));
            event.target.classList.add('active');
        }

        async function loadConfig() {
            try {
                const response = await fetch(`${MANAGER_URL}/config`);
                const data = await response.json();
                
                if (data.error) {
                    document.getElementById('validation-result').textContent = `Error: ${data.error}`;
                    return;
                }
                
                const { config, metadata } = data;
                
                // Update stats
                document.getElementById('endpoint-count').textContent = metadata.total_endpoints;
                document.getElementById('gateway-port').textContent = metadata.port;
                document.getElementById('cors-status').textContent = metadata.cors_enabled ? '‚úÖ' : '‚ùå';
                document.getElementById('config-status').textContent = '‚úÖ';
                
                // Load settings
                document.getElementById('gateway-port-setting').value = metadata.port;
                document.getElementById('timeout-setting').value = config.timeout;
                document.getElementById('cache-ttl-setting').value = config.cache_ttl;
                
                loadEndpoints();
                
            } catch (error) {
                document.getElementById('config-status').textContent = '‚ùå';
                document.getElementById('validation-result').textContent = `Failed to load config: ${error.message}`;
            }
        }

        async function loadEndpoints() {
            try {
                const response = await fetch(`${MANAGER_URL}/config`);
                const data = await response.json();
                
                if (data.error) {
                    document.getElementById('endpoints-list').innerHTML = `<div class="result">Error: ${data.error}</div>`;
                    return;
                }
                
                const endpoints = data.config.endpoints || [];
                let html = '';
                
                endpoints.forEach(endpoint => {
                    const backend = endpoint.backend[0] || {};
                    html += `
                        <div class="endpoint-item">
                            <div class="endpoint-header">
                                <div>
                                    <span class="method-badge method-${endpoint.method.toLowerCase()}">${endpoint.method}</span>
                                    <strong>${endpoint.endpoint}</strong>
                                </div>
                                <button onclick="removeEndpoint('${endpoint.endpoint}')" class="danger">üóëÔ∏è Remove</button>
                            </div>
                            <p><strong>Backend:</strong> ${backend.host ? backend.host[0] : 'N/A'}${backend.url_pattern || ''}</p>
                            <p><strong>Encoding:</strong> ${endpoint.output_encoding || 'json'}</p>
                        </div>
                    `;
                });
                
                if (endpoints.length === 0) {
                    html = '<p>No endpoints configured. <button onclick="showSection(\'add-endpoint\')">Add your first API</button></p>';
                }
                
                document.getElementById('endpoints-list').innerHTML = html;
                
            } catch (error) {
                document.getElementById('endpoints-list').innerHTML = `<div class="result">Error loading endpoints: ${error.message}</div>`;
            }
        }

        async function validateConfig() {
            try {
                const response = await fetch(`${MANAGER_URL}/validate`);
                const data = await response.json();
                
                let result = `Configuration Validation:\n`;
                result += `Valid: ${data.valid ? '‚úÖ Yes' : '‚ùå No'}\n`;
                result += `Endpoints: ${data.endpoints_count}\n`;
                result += `Config Size: ${data.config_size} bytes\n\n`;
                
                if (data.issues && data.issues.length > 0) {
                    result += `Issues Found:\n`;
                    data.issues.forEach(issue => {
                        result += `‚ùå ${issue}\n`;
                    });
                } else {
                    result += `‚úÖ No issues found!\n`;
                }
                
                document.getElementById('validation-result').textContent = result;
                
            } catch (error) {
                document.getElementById('validation-result').textContent = `Validation failed: ${error.message}`;
            }
        }

        async function restartGateway() {
            if (!confirm('Restart KrakenD Gateway? This will briefly interrupt service.')) {
                return;
            }
            
            try {
                const response = await fetch(`${MANAGER_URL}/restart`, { method: 'POST' });
                const data = await response.json();
                
                if (data.error) {
                    alert(`Restart failed: ${data.error}`);
                } else {
                    alert('‚úÖ Gateway restarted successfully!');
                    setTimeout(loadConfig, 2000); // Reload config after restart
                }
                
            } catch (error) {
                alert(`Restart failed: ${error.message}`);
            }
        }

        document.getElementById('simple-endpoint-form').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const formData = {
                endpoint: document.getElementById('endpoint-path').value,
                method: document.getElementById('method').value,
                backend_host: document.getElementById('backend-host').value,
                backend_path: document.getElementById('backend-path').value || document.getElementById('endpoint-path').value,
                headers: ["Content-Type"]
            };
            
            try {
                const response = await fetch(`${MANAGER_URL}/endpoints`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(formData)
                });
                
                const result = await response.json();
                
                document.getElementById('add-result').style.display = 'block';
                
                if (result.error) {
                    document.getElementById('add-result').textContent = `Error: ${result.error}`;
                } else {
                    document.getElementById('add-result').textContent = `‚úÖ API endpoint created successfully!\n\n${JSON.stringify(result.endpoint, null, 2)}`;
                    document.getElementById('simple-endpoint-form').reset();
                    loadConfig(); // Refresh stats
                }
                
            } catch (error) {
                document.getElementById('add-result').style.display = 'block';
                document.getElementById('add-result').textContent = `Failed to create endpoint: ${error.message}`;
            }
        });

        async function removeEndpoint(endpointPath) {
            if (!confirm(`Remove endpoint: ${endpointPath}?`)) {
                return;
            }
            
            try {
                const cleanPath = endpointPath.startsWith('/') ? endpointPath.substring(1) : endpointPath;
                const response = await fetch(`${MANAGER_URL}/endpoints/${cleanPath}`, { method: 'DELETE' });
                const result = await response.json();
                
                if (result.error) {
                    alert(`Failed to remove endpoint: ${result.error}`);
                } else {
                    alert('‚úÖ Endpoint removed successfully!');
                    loadEndpoints();
                    loadConfig();
                }
                
            } catch (error) {
                alert(`Failed to remove endpoint: ${error.message}`);
            }
        }

        async function testEndpoint() {
            const endpoint = document.getElementById('test-endpoint').value;
            const method = document.getElementById('test-method').value;
            
            document.getElementById('test-results').textContent = 'Testing...';
            
            try {
                const response = await fetch(`${GATEWAY_URL}${endpoint}`, { method });
                const result = await response.json();
                
                document.getElementById('test-results').textContent = 
                    `‚úÖ Test successful for ${method} ${endpoint}\n\nResponse:\n${JSON.stringify(result, null, 2)}`;
                    
            } catch (error) {
                document.getElementById('test-results').textContent = 
                    `‚ùå Test failed for ${method} ${endpoint}\nError: ${error.message}`;
            }
        }

        // Initialize
        window.onload = () => {
            loadConfig();
        };
    </script>
</body>
</html>

