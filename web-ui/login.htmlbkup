<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>KrakenD Login</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { 
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .login-container {
            background: rgba(255,255,255,0.95);
            padding: 40px;
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            width: 400px;
            text-align: center;
        }
        
        .logo { font-size: 4em; margin-bottom: 20px; }
        h1 { color: #2c3e50; margin-bottom: 10px; }
        p { color: #666; margin-bottom: 30px; }
        
        .form-group {
            margin: 20px 0;
            text-align: left;
        }
        
        label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #2c3e50;
        }
        
        input {
            width: 100%;
            padding: 15px;
            border: 2px solid #e1e8ed;
            border-radius: 10px;
            font-size: 16px;
            transition: border-color 0.3s ease;
        }
        
        input:focus {
            outline: none;
            border-color: #667eea;
        }
        
        button {
            width: 100%;
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            padding: 15px;
            border: none;
            border-radius: 10px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: transform 0.3s ease;
        }
        
        button:hover { transform: translateY(-2px); }
        button:disabled { opacity: 0.6; cursor: not-allowed; }
        
        .error {
            color: #ff6b6b;
            background: #ffe6e6;
            padding: 10px;
            border-radius: 8px;
            margin: 15px 0;
            display: none;
        }
        
        .success {
            color: #00b894;
            background: #e6fff9;
            padding: 10px;
            border-radius: 8px;
            margin: 15px 0;
            display: none;
        }
        
        .demo-creds {
            background: #e8f4fd;
            border: 1px solid #bee5eb;
            border-radius: 8px;
            padding: 15px;
            margin: 20px 0;
            text-align: left;
            font-size: 14px;
        }
        
        .cred-option {
            margin: 8px 0;
            cursor: pointer;
            padding: 5px;
            border-radius: 4px;
            transition: background 0.2s;
        }
        
        .cred-option:hover {
            background: rgba(102, 126, 234, 0.1);
        }
    </style>
</head>
<body>
    <div class="login-container">
        <div class="logo">üêô</div>
        <h1>KrakenD Manager</h1>
        <p>Sign in to manage your API Gateway</p>
        
        <div class="demo-creds">
            <strong>Demo Accounts (click to use):</strong><br>
            <div class="cred-option" onclick="fillCredentials('admin', 'krakend123')">
                üëë <strong>admin</strong> / krakend123 (Full access)
            </div>
            <div class="cred-option" onclick="fillCredentials('user', 'password123')">
                üë§ <strong>user</strong> / password123 (Standard user)
            </div>
            <div class="cred-option" onclick="fillCredentials('demo', 'demo123')">
                üéØ <strong>demo</strong> / demo123 (Demo account)
            </div>
        </div>
        
        <form id="login-form">
            <div class="form-group">
                <label for="username">Username</label>
                <input type="text" id="username" required autocomplete="username">
            </div>
            
            <div class="form-group">
                <label for="password">Password</label>
                <input type="password" id="password" required autocomplete="current-password">
            </div>
            
            <div class="error" id="error-message"></div>
            <div class="success" id="success-message"></div>
            
            <button type="submit" id="login-btn">üîê Sign In</button>
        </form>
    </div>

    <script>
        const MANAGER_URL = 'http://xxx.xxx.x.xx:5001';

        function fillCredentials(username, password) {
            document.getElementById('username').value = username;
            document.getElementById('password').value = password;
        }

        document.getElementById('login-form').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const username = document.getElementById('username').value;
            const password = document.getElementById('password').value;
            const errorDiv = document.getElementById('error-message');
            const successDiv = document.getElementById('success-message');
            const loginBtn = document.getElementById('login-btn');
            
            // Hide previous messages
            errorDiv.style.display = 'none';
            successDiv.style.display = 'none';
            
            // Disable button during login
            loginBtn.disabled = true;
            loginBtn.textContent = 'üîÑ Signing in...';
            
            try {
                const response = await fetch(`${MANAGER_URL}/auth/login`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    credentials: 'include',
                    body: JSON.stringify({ username, password })
                });
                
                const result = await response.json();
                
                if (result.success) {
                    successDiv.textContent = result.message || 'Login successful!';
                    successDiv.style.display = 'block';
                    
                    // Redirect after short delay
                    setTimeout(() => {
                        window.location.href = 'index.html';
                    }, 1000);
                } else {
                    errorDiv.textContent = result.error || 'Login failed';
                    errorDiv.style.display = 'block';
                }
                
            } catch (error) {
                errorDiv.textContent = 'Connection failed. Is the management service running?';
                errorDiv.style.display = 'block';
            } finally {
                loginBtn.disabled = false;
                loginBtn.textContent = 'üîê Sign In';
            }
        });
        
        // Check if already logged in
        window.onload = () => {
            fetch(`${MANAGER_URL}/auth/status`, { credentials: 'include' })
                .then(r => r.json())
                .then(data => {
                    if (data.logged_in) {
                        window.location.href = 'index.html';
                    }
                })
                .catch(() => {});
        };
    </script>
</body>
</html>
